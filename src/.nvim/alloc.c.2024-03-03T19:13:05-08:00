//#include <stdint.h>
#include <stdlib.h>
#include "alloc.h"

//#define INCREMENT 256

/*
 * This is the header for each allocated memory used internally by the
 * allocator. The test cases use this too to get the size of the header.
 */
/*
struct header {
  uint64_t size;
  struct header *next;
};
 * */

/*
 * Allocation algorithm options
 */
//enum algs { FIRST_FIT, BEST_FIT, WORST_FIT };

/*
 * Allocation statistics. The test cases only use free_size, but other fields
 * are useful for checking the correctness of the implementation.
 */
/*
struct allocinfo {
  int free_size;
  int free_chunks;
  int largest_free_chunk_size;
  int smallest_free_chunk_size;
};
 * */

//GLOBAL VARIABLES
static int g_limit; //heap limit
enum algs g_alg; //algorithm
int space;

//HELPER FUNCTIONS
//
//
//
/*
 * alloc() allocates memory from the heap. The first argument indicates the
 * size. It returns the pointer to the newly-allocated memory. It returns NULL
 * if there is not enough space.
 */
void *alloc(int sz) {
  const int limit = g_limit;
  struct header a;
  void* ptr;

  if (sbrk(0) == 0) {
    ptr = sbrk(INCREMENT);
    a.size = sz;
    a.next = NULL;
  }
  else //if it doesnt surpass limit
    ptr = sbrk(sz);

  if (ptr == (void*)-1)
    return NULL;




  enum algs opt = g_alg;
  if (opt == FIRST_FIT) {
  }
  else if (opt == BEST_FIT) {
  }
  else if (opt == WORST_FIT) {
  }
  
  return 0;
}

/*
 * dealloc() frees the memory pointed to by the first argument.
 */
void dealloc(void * ptr) {
}

/*
 * allocopt() sets the options for the memory allocator.
 *
 * The first argument sets the algorithm. The second argument sets the size
 * limit.
 */
void allocopt(enum algs alg, int limit) {
  g_limit = limit;
  g_alg = alg;
}

/*
 * allocinfo() returns the current statistics.
 */
struct allocinfo allocinfo(void);
